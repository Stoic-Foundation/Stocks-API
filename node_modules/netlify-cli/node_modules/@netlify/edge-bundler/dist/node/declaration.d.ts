import { FunctionConfig, HTTPMethod, Path } from './config.js';
import { FeatureFlags } from './feature_flags.js';
interface BaseDeclaration {
    cache?: string;
    function: string;
    method?: HTTPMethod | HTTPMethod[];
    name?: string;
    generator?: string;
}
type DeclarationWithPath = BaseDeclaration & {
    path: Path;
    excludedPath?: Path | Path[];
};
type DeclarationWithPattern = BaseDeclaration & {
    pattern: string;
    excludedPattern?: string | string[];
};
export type Declaration = DeclarationWithPath | DeclarationWithPattern;
export declare const mergeDeclarations: (tomlDeclarations: Declaration[], userFunctionsConfig: Record<string, FunctionConfig>, internalFunctionsConfig: Record<string, FunctionConfig>, deployConfigDeclarations: Declaration[], _featureFlags?: FeatureFlags) => Declaration[];
/**
 * Normalizes a regular expression, ensuring it has a leading `^` and trailing
 * `$` characters.
 */
export declare const normalizePattern: (pattern: string) => string;
export {};
