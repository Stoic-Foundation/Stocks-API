import Ajv from 'ajv';
import ajvErrors from 'ajv-errors';
import betterAjvErrors from 'better-ajv-errors';
import ManifestValidationError from './error.js';
import edgeManifestSchema from './schema.js';
let manifestValidator;
const initializeValidator = () => {
    if (manifestValidator === undefined) {
        const ajv = new Ajv({ allErrors: true });
        ajvErrors(ajv);
        // regex pattern for manifest route pattern
        // checks if the pattern string starts with ^ and ends with $
        const normalizedPatternRegex = /^\^.*\$$/;
        ajv.addFormat('regexPattern', {
            validate: (data) => normalizedPatternRegex.test(data),
        });
        manifestValidator = ajv.compile(edgeManifestSchema);
    }
    return manifestValidator;
};
// throws on validation error
// eslint-disable-next-line @typescript-eslint/no-unused-vars
export const validateManifest = (manifestData, _featureFlags = {}) => {
    const validate = initializeValidator();
    const valid = validate(manifestData);
    if (!valid) {
        let errorOutput;
        if (validate.errors) {
            errorOutput = betterAjvErrors(edgeManifestSchema, manifestData, validate.errors, { indent: 2 });
        }
        throw new ManifestValidationError(errorOutput);
    }
};
// eslint-disable-next-line unicorn/prefer-export-from
export { ManifestValidationError };
