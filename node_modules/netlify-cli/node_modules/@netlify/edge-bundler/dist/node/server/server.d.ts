/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import type { WriteStream } from 'fs';
import { OnAfterDownloadHook, OnBeforeDownloadHook } from '../bridge.js';
import { FunctionConfig } from '../config.js';
import type { EdgeFunction } from '../edge_function.js';
import type { FeatureFlags } from '../feature_flags.js';
import { LogFunction } from '../logger.js';
import type { ModuleGraphJson } from '../vendor/module_graph/module_graph.js';
export type FormatFunction = (name: string) => string;
interface StartServerOptions {
    getFunctionsConfig?: boolean;
    importMapPaths?: string[];
}
interface InspectSettings {
    enabled: boolean;
    pause: boolean;
    address?: string;
}
interface ServeOptions {
    basePath: string;
    bootstrapURL: string;
    certificatePath?: string;
    debug?: boolean;
    distImportMapPath?: string;
    featureFlags?: FeatureFlags;
    inspectSettings?: InspectSettings;
    onAfterDownload?: OnAfterDownloadHook;
    onBeforeDownload?: OnBeforeDownloadHook;
    formatExportTypeError?: FormatFunction;
    formatImportError?: FormatFunction;
    port: number;
    rootPath?: string;
    servePath: string;
    stderr?: WriteStream;
    stdout?: WriteStream;
    userLogger?: LogFunction;
    systemLogger?: LogFunction;
}
export declare const serve: ({ basePath, bootstrapURL, certificatePath, debug, distImportMapPath, inspectSettings, featureFlags, formatExportTypeError, formatImportError, onAfterDownload, onBeforeDownload, port, rootPath, servePath, stderr, stdout, userLogger, systemLogger, }: ServeOptions) => Promise<(functions: EdgeFunction[], env?: NodeJS.ProcessEnv, options?: StartServerOptions) => Promise<{
    features: Record<string, boolean>;
    functionsConfig: FunctionConfig[];
    graph: ModuleGraphJson;
    npmSpecifiersWithExtraneousFiles: string[];
    success: boolean;
}>>;
export {};
