import { Attributes } from '@opentelemetry/api';
export type BuildError = Omit<BasicErrorInfo, 'errorProps'> & {
    title: string;
    pluginInfo?: string;
    locationInfo?: string;
    errorProps?: string;
};
export type BasicErrorInfo = {
    message: string;
    stack: string;
    severity: string;
    type: ErrorTypes;
    errorInfo: ErrorInfo;
    errorProps: Record<string, unknown>;
    errorMetadata: any;
    /**
     * The core step id where the error took place
     */
    stage?: string;
    tsConfigInfo?: any;
} & ErrorType;
/**
 * Error severity groups the errors emitted by build and used to translate to exit code via SEVERITY_MAP
 */
declare enum ErrorSeverity {
    /**
     * build success
     */
    success = "success",
    /**
     * not an error, e.g. build cancellation
     */
    none = "none",
    /**
     * user error
     */
    info = "info",
    /**
     * community plugin error
     */
    warning = "warning",
    /**
     * system error, including core plugin error
     */
    error = "Error"
}
/**
 * How the stack trace should appear in the build error logs
 */
declare enum StackType {
    /**
     * not printed
     */
    none = "none",
    stack = "stack",
    /**
     * printed as is, but taken from `error.message`. Used when `error.stack` is not being correct due to the error being passed between different processes.
     */
    message = "message"
}
type GroupFunction = ({ location }: {
    location: ErrorLocation;
}) => string;
export type TitleFunction = ({ location }: {
    location: ErrorLocation;
}) => string;
export type ErrorInfo = {
    plugin?: PluginInfo;
    tsConfig?: any;
    location: ErrorLocation;
};
type PluginInfo = {
    packageName: string;
    pluginPackageJson: {
        version?: string;
    };
};
export type BuildCommandLocation = {
    buildCommand: string;
    buildCommandOrigin: string;
};
export declare const isBuildCommandLocation: (location?: ErrorLocation) => location is BuildCommandLocation;
export type FunctionsBundlingLocation = {
    functionName: string;
    functionType: string;
};
export declare const isFunctionsBundlingLocation: (location?: ErrorLocation) => location is FunctionsBundlingLocation;
export type CoreStepLocation = {
    coreStepName: string;
};
export declare const isCoreStepLocation: (location?: ErrorLocation) => location is CoreStepLocation;
export type PluginLocation = {
    event: string;
    packageName: string;
    loadedFrom: string;
    origin: string;
    input?: string;
};
export declare const isPluginLocation: (location?: ErrorLocation) => location is PluginLocation;
export type APILocation = {
    endpoint: string;
    parameters?: any;
};
export declare const isAPILocation: (location?: ErrorLocation) => location is APILocation;
export type DeployLocation = {
    statusCode: string;
};
export declare const isDeployLocation: (location?: ErrorLocation) => location is DeployLocation;
export type ErrorLocation = BuildCommandLocation | FunctionsBundlingLocation | CoreStepLocation | PluginLocation | APILocation | DeployLocation;
/**
 * Given a BuildError, extract the relevant trace attributes to add to the on-going Span
 */
export declare const buildErrorToTracingAttributes: (error: BuildError | BasicErrorInfo) => Attributes;
/**
 * Retrieve error-type specific information
 */
export declare const getTypeInfo: ({ type }: {
    type: any;
}) => any;
/**
 * Interface for build error types
 */
export interface ErrorType {
    /**
     *  main title shown in build error logs and in the UI (statuses)
     */
    title: TitleFunction | string;
    /**
     *  retrieve a human-friendly location of the error, printed
     */
    locationType?: string;
    /**
     *  `true` when the `Error` instance static properties
     */
    showErrorProps?: boolean;
    /**
     *  `true` when the stack trace should be cleaned up
     */
    rawStack?: boolean;
    /**
     *  `true` when we want this error to show in build logs (defaults to true)
     */
    showInBuildLog?: boolean;
    /**
     *  main title shown in Bugsnag. Also used to group errors together in Bugsnag, combined with `error.message`. Defaults to `title`.
     */
    group?: GroupFunction;
    /**
     *  error severity (also used by Bugsnag)
     */
    severity: keyof typeof ErrorSeverity;
    /**
     *  how the stack trace should appear in build error logs
     */
    stackType: keyof typeof StackType;
}
declare const ErrorTypeMap: {
    /**
     * Plugin called `utils.build.cancelBuild()`
     */
    readonly cancelBuild: "cancelBuild";
    readonly resolveConfig: "resolveConfig";
    readonly dependencies: "dependencies";
    readonly pluginInput: "pluginInput";
    readonly pluginUnsupportedVersion: "pluginUnsupportedVersion";
    readonly buildCommand: "buildCommand";
    readonly functionsBundling: "functionsBundling";
    readonly secretScanningFoundSecrets: "secretScanningFoundSecrets";
    readonly failPlugin: "failPlugin";
    readonly failBuild: "failBuild";
    readonly pluginValidation: "pluginValidation";
    readonly pluginInternal: "pluginInternal";
    readonly ipc: "ipc";
    readonly corePlugin: "corePlugin";
    readonly trustedPlugin: "trustedPlugin";
    readonly coreStep: "coreStep";
    readonly api: "api";
    readonly deploy: "deploy";
    readonly deployInternal: "deployInternal";
    readonly exception: "exception";
    readonly telemetry: "telemetry";
};
export type ErrorTypes = keyof typeof ErrorTypeMap;
export {};
