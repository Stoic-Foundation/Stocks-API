import { NodeBundlerName } from '@netlify/zip-it-and-ship-it';
export declare const bundleFunctions: {
    event: string;
    coreStep: ({ childEnv, constants: { INTERNAL_FUNCTIONS_SRC: relativeInternalFunctionsSrc, IS_LOCAL: isRunningLocally, FUNCTIONS_SRC: relativeFunctionsSrc, FUNCTIONS_DIST: relativeFunctionsDist, }, buildDir, logs, netlifyConfig, featureFlags, repositoryRoot, userNodeVersion, systemLog, }: {
        childEnv: any;
        constants: {
            INTERNAL_FUNCTIONS_SRC: any;
            IS_LOCAL: any;
            FUNCTIONS_SRC: any;
            FUNCTIONS_DIST: any;
        };
        buildDir: any;
        logs: any;
        netlifyConfig: any;
        featureFlags: any;
        repositoryRoot: any;
        userNodeVersion: any;
        systemLog: any;
    }) => Promise<{
        tags?: undefined;
        metrics?: undefined;
    } | {
        tags: {
            bundler: NodeBundlerName[];
        };
        metrics: {
            type: string;
            name: string;
            value: number;
            tags: {
                type: string;
            };
        }[];
    }>;
    coreStepId: string;
    coreStepName: string;
    coreStepDescription: () => string;
    condition: ({ buildDir, constants: { INTERNAL_FUNCTIONS_SRC, FUNCTIONS_SRC } }: {
        buildDir: any;
        constants: {
            INTERNAL_FUNCTIONS_SRC: any;
            FUNCTIONS_SRC: any;
        };
    }) => Promise<boolean>;
};
export declare const zipItAndShipIt: {
    zipFunctions(relativeSrcFolders: string | string[], destFolder: string, args_2?: import("@netlify/zip-it-and-ship-it").ZipFunctionsOptions | undefined): Promise<(Omit<import("@netlify/zip-it-and-ship-it/dist/function.js").FunctionArchive, "runtime"> & {
        routes?: import("@netlify/zip-it-and-ship-it/dist/utils/routes.js").Route[] | undefined;
        runtime: import("@netlify/zip-it-and-ship-it").RuntimeName;
        schedule?: string | undefined;
        runtimeAPIVersion?: number | undefined;
    })[]>;
};
