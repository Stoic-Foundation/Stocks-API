export function getConfigOpts({ config, defaultConfig, cwd, repositoryRoot, packagePath, apiHost, token, siteId, context, branch, baseRelDir, envOpt, mode, offline, deployId, buildId, testOpts, featureFlags, }: {
    config: any;
    defaultConfig: any;
    cwd: any;
    repositoryRoot: any;
    packagePath: any;
    apiHost: any;
    token: any;
    siteId: any;
    context: any;
    branch: any;
    baseRelDir: any;
    envOpt: any;
    mode: any;
    offline: any;
    deployId: any;
    buildId: any;
    testOpts: any;
    featureFlags: any;
}): {
    config: any;
    defaultConfig: any;
    cwd: any;
    packagePath: any;
    repositoryRoot: any;
    context: any;
    branch: any;
    baseRelDir: any;
    host: any;
    token: any;
    siteId: any;
    deployId: any;
    buildId: any;
    mode: any;
    offline: any;
    env: any;
    testOpts: any;
    featureFlags: any;
};
export const loadConfig: any;
export function resolveUpdatedConfig(configOpts: any, configMutations: any): Promise<any>;
export function saveUpdatedConfig({ configMutations, buildDir, repositoryRoot, configPath, outputConfigPath, headersPath, redirectsPath, logs, featureFlags, context, branch, debug, saveConfig, }: {
    configMutations: any;
    buildDir: any;
    repositoryRoot: any;
    configPath?: string | undefined;
    outputConfigPath?: any;
    headersPath: any;
    redirectsPath: any;
    logs: any;
    featureFlags: any;
    context: any;
    branch: any;
    debug: any;
    saveConfig: any;
}): Promise<void>;
export function restoreUpdatedConfig({ configMutations, buildDir, repositoryRoot, configPath, headersPath, redirectsPath, saveConfig, }: {
    configMutations: any;
    buildDir: any;
    repositoryRoot: any;
    configPath?: string | undefined;
    headersPath: any;
    redirectsPath: any;
    saveConfig: any;
}): Promise<void>;
