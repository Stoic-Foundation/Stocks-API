import type { BuildFlags } from './types.js';
export declare const startBuild: (flags: Partial<BuildFlags>) => {
    debug: boolean;
    systemLogFile: number | undefined;
    errorMonitor: any;
    logs: import("../log/logger.js").BufferedLogs | undefined;
    timers: never[];
    env: Record<string, unknown>;
    token: string;
    mode: import("./types.js").Mode;
    offline: boolean;
    telemetry: boolean;
    verbose: boolean;
    functionsDistDir: string;
    edgeFunctionsDistDir: string;
    cacheDir: string;
    sendStatus: boolean;
    saveConfig: boolean;
    apiHost?: string | undefined;
    testOpts: import("./types.js").TestOptions;
    statsd: {
        port: number;
    };
    timeline: string;
    cachedConfig: Record<string, unknown>;
    siteId: string;
    dry: false;
    context: string;
    statsdOpts: {
        host?: number | undefined;
        port: number;
    };
};
export declare const execBuild: any;
export declare const runAndReportBuild: ({ pluginsOptions, netlifyConfig, configOpts, siteInfo, configPath, outputConfigPath, headersPath, redirectsPath, packagePath, buildDir, repositoryRoot, nodePath, packageJson, userNodeVersion, childEnv, context, branch, buildbotServerSocket, constants, dry, mode, api, errorMonitor, deployId, errorParams, logs, debug, systemLog, systemLogFile, verbose, timers, sendStatus, saveConfig, testOpts, featureFlags, timeline, devCommand, quiet, integrations, explicitSecretKeys, edgeFunctionsBootstrapURL, eventHandlers, }: {
    pluginsOptions: any;
    netlifyConfig: any;
    configOpts: any;
    siteInfo: any;
    configPath: any;
    outputConfigPath: any;
    headersPath: any;
    redirectsPath: any;
    packagePath: any;
    buildDir: any;
    repositoryRoot: any;
    nodePath: any;
    packageJson: any;
    userNodeVersion: any;
    childEnv: any;
    context: any;
    branch: any;
    buildbotServerSocket: any;
    constants: any;
    dry: any;
    mode: any;
    api: any;
    errorMonitor: any;
    deployId: any;
    errorParams: any;
    logs: any;
    debug: any;
    systemLog: any;
    systemLogFile: any;
    verbose: any;
    timers: any;
    sendStatus: any;
    saveConfig: any;
    testOpts: any;
    featureFlags: any;
    timeline: any;
    devCommand: any;
    quiet: any;
    integrations: any;
    explicitSecretKeys: any;
    edgeFunctionsBootstrapURL: any;
    eventHandlers: any;
}) => Promise<{
    pluginsOptions: any;
    netlifyConfig: any;
    stepsCount: number | undefined;
    timers: any;
    configMutations: never[] | undefined;
    metrics: never[] | undefined;
}>;
