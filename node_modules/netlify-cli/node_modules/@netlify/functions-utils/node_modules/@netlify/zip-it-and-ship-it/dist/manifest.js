import { promises as fs } from 'fs';
import { resolve } from 'path';
import { arch, platform } from 'process';
const MANIFEST_VERSION = 1;
export const createManifest = async ({ functions, path }) => {
    const formattedFunctions = functions.map((func) => formatFunctionForManifest(func));
    const payload = {
        functions: formattedFunctions,
        system: { arch, platform },
        timestamp: Date.now(),
        version: MANIFEST_VERSION,
    };
    await fs.writeFile(path, JSON.stringify(payload));
};
const formatFunctionForManifest = ({ bundler, displayName, generator, invocationMode, mainFile, name, path, priority, routes, runtime, runtimeVersion, runtimeAPIVersion, schedule, }) => {
    const manifestFunction = {
        bundler,
        displayName,
        generator,
        invocationMode,
        buildData: { runtimeAPIVersion },
        mainFile,
        name,
        priority,
        runtimeVersion,
        path: resolve(path),
        runtime,
        schedule,
    };
    if (routes?.length !== 0) {
        manifestFunction.routes = routes;
    }
    return manifestFunction;
};
//# sourceMappingURL=manifest.js.map