import { FunctionSource } from './function.js';
import type { NodeBundlerName } from './runtimes/node/bundlers/types.js';
import type { ModuleFormat } from './runtimes/node/utils/module_format.js';
interface FunctionConfig {
    externalNodeModules?: string[];
    includedFiles?: string[];
    includedFilesBasePath?: string;
    ignoredNodeModules?: string[];
    nodeBundler?: NodeBundlerName;
    nodeSourcemap?: boolean;
    nodeVersion?: string;
    rustTargetDirectory?: string;
    schedule?: string;
    zipGo?: boolean;
    name?: string;
    generator?: string;
    nodeModuleFormat?: ModuleFormat;
}
type GlobPattern = string;
type Config = Record<GlobPattern, FunctionConfig>;
type FunctionWithoutConfig = Omit<FunctionSource, 'config'>;
declare const getConfigForFunction: ({ config, configFileDirectories, func, }: {
    config?: Config | undefined;
    configFileDirectories?: string[] | undefined;
    func: FunctionWithoutConfig;
}) => Promise<FunctionConfig>;
export { Config, FunctionConfig, FunctionWithoutConfig, getConfigForFunction };
