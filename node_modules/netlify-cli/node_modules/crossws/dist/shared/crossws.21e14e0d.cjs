'use strict';

function defineWebSocketAdapter(factory) {
  return factory;
}

class WebSocketError extends Error {
  constructor(...args) {
    super(...args);
    this.name = "WebSocketError";
  }
}

class WebSocketMessage {
  constructor(rawData, isBinary) {
    this.rawData = rawData;
    this.isBinary = isBinary;
  }
  text() {
    return this.rawData.toString();
  }
  toString() {
    return `<WebSocketMessage: ${this.text()}>`;
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toString();
  }
}

const ReadyStateMap = {
  "-1": "unkown",
  0: "connecting",
  1: "open",
  2: "closing",
  3: "closed"
};
class WebSocketPeerBase {
  constructor(ctx) {
    this.ctx = ctx;
  }
  get id() {
    return void 0;
  }
  get readyState() {
    return -1;
  }
  toString() {
    const readyState = ReadyStateMap[this.readyState];
    return `<WebSocketPeer${this.id ? ` ${this.id}` : ""} (${readyState})>`;
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toString();
  }
}

exports.WebSocketError = WebSocketError;
exports.WebSocketMessage = WebSocketMessage;
exports.WebSocketPeerBase = WebSocketPeerBase;
exports.defineWebSocketAdapter = defineWebSocketAdapter;
