import type { ModuleOptionsWithValidateTrue, ModuleOptionsWithValidateFalse, ModuleThis } from "../lib/moduleCommon.js";
export declare const FundamentalsTimeSeries_Types: Record<string, any>;
export type FundamentalsTimeSeriesResults = Array<FundamentalsTimeSeriesResult>;
export interface FundamentalsTimeSeriesResult {
    [key: string]: unknown;
    date: Date;
}
export interface FundamentalsTimeSeriesOptions {
    period1: Date | number | string;
    period2?: Date | number | string;
    type?: string;
    merge?: boolean;
    padTimeSeries?: boolean;
    lang?: string;
    region?: string;
}
export default function fundamentalsTimeSeries(this: ModuleThis, symbol: string, queryOptionsOverrides: FundamentalsTimeSeriesOptions, moduleOptions?: ModuleOptionsWithValidateTrue): Promise<FundamentalsTimeSeriesResult>;
export default function fundamentalsTimeSeries(this: ModuleThis, symbol: string, queryOptionsOverrides: FundamentalsTimeSeriesOptions, moduleOptions?: ModuleOptionsWithValidateFalse): Promise<any>;
export declare const processResponse: (response: any) => any;
