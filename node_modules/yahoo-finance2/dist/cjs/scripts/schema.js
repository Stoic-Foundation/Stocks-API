"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const ts_json_schema_generator_1 = require("ts-json-schema-generator");
// @ts-expect-error: no types
const oas_schema_walker_1 = __importDefault(require("oas-schema-walker"));
const postWalker_js_1 = __importDefault(require("./schema/postWalker.js"));
const yfNumberTypeFormatter_js_1 = __importDefault(require("./schema/TypeFormatter/yfNumberTypeFormatter.js"));
const yfReferenceTypeFormatter_js_1 = __importDefault(require("./schema/TypeFormatter/yfReferenceTypeFormatter.js"));
const yfFunctionIgnorer_js_1 = __importDefault(require("./schema/TypeFormatter/yfFunctionIgnorer.js"));
//const OUTPUT_PATH = "schema.json";
const OUTPUT_PATH = process.stdout;
const config = {
    path: "src/{modules/**/!(*spec.ts),lib/options.ts}",
    tsconfig: "tsconfig.json",
    type: "*",
};
const formatter = (0, ts_json_schema_generator_1.createFormatter)(config, (chainTypeFormatter, circularReferenceTypeFormatter) => {
    var _a;
    chainTypeFormatter
        .addTypeFormatter(new yfReferenceTypeFormatter_js_1.default(circularReferenceTypeFormatter, (_a = config.encodeRefs) !== null && _a !== void 0 ? _a : true))
        .addTypeFormatter(new yfNumberTypeFormatter_js_1.default())
        .addTypeFormatter(new yfFunctionIgnorer_js_1.default());
});
const program = (0, ts_json_schema_generator_1.createProgram)(config);
const parser = (0, ts_json_schema_generator_1.createParser)(program, config);
const generator = new ts_json_schema_generator_1.SchemaGenerator(program, parser, formatter, config);
const _schema = generator.createSchema(config.type);
const schema = Object.assign({ $schema: _schema.$schema, $comment: "DO NOT EDIT THIS FILE.  It is generated automatically " +
        "from typescript interfaces in the project.  To update, run " +
        "`yarn schema`." }, _schema);
// @ts-expect-error: no types
for (const key of Object.keys(schema.definitions)) {
    // @ts-expect-error: no types
    oas_schema_walker_1.default.walkSchema(schema.definitions[key], {}, {}, postWalker_js_1.default);
}
const schemaString = JSON.stringify(schema, null, 2);
function throwErr(err) {
    if (err)
        throw err;
}
if (OUTPUT_PATH === process.stdout) {
    process.stdout.write(schemaString, throwErr);
}
else if (typeof OUTPUT_PATH === "string") {
    (0, fs_1.writeFile)(OUTPUT_PATH, schemaString, throwErr);
}
else {
    throw new Error("Unsupported output path");
}
